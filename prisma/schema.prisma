generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  User       @map("user")
  Admin      @map("admin")
  SuperAdmin @map("super_admin")
  Moderator  @map("moderator")

  @@map("role")
}

model User {
  id Int @id @default(autoincrement())

  username String @unique @db.VarChar(35)

  email String @unique @db.VarChar(100)

  // 97 characters for the argon2 hash
  password String @db.Char(97)

  role Role @default(User)

  isActive Boolean @default(true) @map("is_active")

  createdAt DateTime @default(now()) @map("created_at") @db.Timestamp()
  updatedAt DateTime @updatedAt @map("updated_at") @db.Timestamp()

  // User 1:1 UserDetail
  details UserDetail?

  // User 1:M Blog
  blogs Blog[]

  // User 1:M BlogInteraction
  interactions BlogInteraction[]

  @@index([isActive])
  @@map("users")
}

model UserDetail {
  userId Int @id // @map("user_id")

  firstName  String @map("first_name") @db.VarChar(20)
  middleName String @map("middle_name") @db.VarChar(20)
  lastName   String @map("last_name") @db.VarChar(20)

  dateOfBirth DateTime @map("date_of_birth") @db.Date

  // NOTE: this is a test, remove the optional in production
  imageId String? @unique @map("image_id") @db.Uuid

  // User 1:1 UserDetail
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  // NOTE: this is a test, remove the optional in production
  // UserDetail 1:1 Attachment
  image Attachment? @relation(fields: [imageId], references: [id])

  @@index([firstName])
  @@index([middleName])
  @@index([lastName])
  @@index([dateOfBirth])
  @@map("user_details")
}

model Blog {
  id Int @id @default(autoincrement())

  title String @db.VarChar(100)

  description String @db.VarChar(255)
  text        String @db.Text

  createdAt DateTime @default(now()) @map("created_at") @db.Timestamp()
  updatedAt DateTime @updatedAt @map("updated_at") @db.Timestamp()

  authorId Int @map("author_id")

  // User 1:M Blog
  author User @relation(fields: [authorId], references: [id])

  // InteractionType M:M Blog
  interactions BlogInteraction[]

  @@index([authorId])
  @@index([createdAt])
  @@index([title])
  @@map("blogs")
}

model InteractionType {
  id Int @id @default(autoincrement())

  name        String @unique() @db.VarChar(25)
  interaction String @unique() @db.VarChar(50)

  createdAt DateTime @default(now()) @map("created_at") @db.Timestamp()
  updatedAt DateTime @updatedAt @map("updated_at") @db.Timestamp()

  // InteractionType M:M Blog
  blogs BlogInteraction[]

  @@map("interaction_types")
}

model BlogInteraction {
  id String @id @default(uuid()) @db.Uuid

  interactionTypeId Int @map("interaction_type_id")
  blogId            Int @map("blog_id")
  userId            Int @map("user_id")

  createdAt DateTime @default(now()) @map("created_at") @db.Timestamp()
  updatedAt DateTime @updatedAt @map("updated_at") @db.Timestamp()

  // InteractionType M:M Blog
  interactionType InteractionType @relation(fields: [interactionTypeId], references: [id])

  // InteractionType M:M Blog
  blog Blog @relation(fields: [blogId], references: [id])

  // User 1:M Blog
  user User @relation(fields: [userId], references: [id])

  @@unique([interactionTypeId, blogId, userId])
  @@map("blog_interactions")
}

model Attachment {
  id String @id @default(uuid()) @db.Uuid

  mimetype String @db.VarChar(12)
  size     BigInt

  createdAt DateTime @default(now()) @map("created_at") @db.Timestamp()
  updatedAt DateTime @updatedAt @map("updated_at") @db.Timestamp()

  // UserDetail 1:1 Attachment
  userDetail UserDetail?

  @@map("attachments")
}
